name: Release

on:
  workflow_dispatch:
    inputs:
      releaseModule:
        required: true
        type: choice
        default: '-'
        description: Module
        options:
          - '-'
          - evaluation-core
          - evaluation-serialization
          - evaluation-js
          - all
      version:
        required: true
        type: string
        description: Release Vesrion (no 'v' prefix)
      dryRun:
        required: true
        type: boolean
        description: Dry Run
        default: true

jobs:

  authorize:
    name: Authorize
    runs-on: ubuntu-18.04
    steps:
      - name: ${{ github.actor }} permission check to do a release
        uses: octokit/request-action@v2.0.0
        with:
          route: GET /repos/:repository/collaborators/${{ github.actor }}
          repository: ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Release
    runs-on: ubuntu-18.04
    needs: [authorize]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: zulu
          cache: gradle

      - name: Validate Release Version
        if: ${{ startsWith(github.event.inputs.version, 'v') }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Version ${{ github.event.inputs.version }} must not start with \'v\'. Use a non-prefixed semantic version, e.g. 1.2.3')

      - name: Lint
        run: ./gradlew ktlintCheck

      - name: Build
        run: ./gradlew assemble

      - name: Test
        run: ./gradlew allTests --info

      - name: Set Version
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          find: 'version = ".*"'
          replace: 'version = "${{ github.event.inputs.version }}"'
          include: '${{ github.event.inputs.releaseModule }}/**'
          regex: true

      - name: Configure Sonatype
        if: ${{ github.event.inputs.dryRun == 'false' }}
        env:
          GRADLE_PROP_FILE: local.properties
        run: |
          echo "sonatypeUsername=${{ secrets.SONATYPE_USERNAME }}" >> $GRADLE_PROP_FILE
          echo "sonatypePassword=${{ secrets.SONATYPE_PASSWORD }}" >> $GRADLE_PROP_FILE
          echo "sonatypeStagingProfileId=${{ secrets.SONATYPE_STAGING_PROFILE_ID }}" >> $GRADLE_PROP_FILE
          echo "signingKeyId=${{ secrets.SIGNING_KEY_ID }}" >> $GRADLE_PROP_FILE
          echo "signingPassword=${{ secrets.SIGNING_PASSWORD }}" >> $GRADLE_PROP_FILE
          echo "signingKey=${{ secrets.SIGNING_KEY }}" >> $GRADLE_PROP_FILE

      - name: Release evaluation-core ${{ github.event.inputs.version }}
        if: ${{ github.event.inputs.dryRun == 'false' && (github.event.inputs.releaseModule == 'evaluation-core' || github.event.inputs.releaseModule == 'all') }}
        run: |
          ./gradlew evaluation-core:publishKotlinMultiplatformPublicationToSonatypeRepository
          ./gradlew evaluation-core:publishJvmPublicationToSonatypeRepository

      - name: Release evaluation-serialization ${{ github.event.inputs.version }}
        if: ${{ github.event.inputs.dryRun == 'false' && (github.event.inputs.releaseModule == 'evaluation-serialization' || github.event.inputs.releaseModule == 'all') }}
        run: |
          ./gradlew evaluation-serialization:publishKotlinMultiplatformPublicationToSonatypeRepository
          ./gradlew evaluation-serialization:publishJvmPublicationToSonatypeRepository    

      - name: Release evaluation-js ${{ github.event.inputs.version }}
        if: ${{ github.event.inputs.dryRun == 'false' && (github.event.inputs.releaseModule == 'evaluation-js' || github.event.inputs.releaseModule == 'all') }}
        run: |
          ./gradlew evaluation-js:publishJsNpmPublicationToNpmjs

      - name: Commit Release
        if: ${{ github.event.inputs.dryRun == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: amplitude-sdk-bot
          GIT_AUTHOR_EMAIL: amplitude-sdk-bot@users.noreply.github.com
          GIT_COMMITTER_NAME: amplitude-sdk-bot
          GIT_COMMITTER_EMAIL: amplitude-sdk-bot@users.noreply.github.com
        run: |
          git commit -am "chore(release): ${{ github.event.inputs.releaseModule }} ${{ github.event.inputs.version }}"
          git push
